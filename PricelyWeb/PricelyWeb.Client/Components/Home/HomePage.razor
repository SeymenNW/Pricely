@page "/"
@using Pricely.Libraries.Shared.Models
@using PricelyWeb.Services
@using PricelyWeb.Services.PricelySettings



@rendermode InteractiveWebAssembly

@inject HttpClient httpClient
@inject IGetPriceRunnerResults _getPriceRunnerResults
@inject PricelySettings _settings

<PageTitle>Hjem</PageTitle>

<MudCard Class="rounded-xl p-4" >
    <MudCardHeader>
        <MudText Typo="Typo.h4">Søg med Pricely</MudText>
    </MudCardHeader>
    <MudCardContent >
        <MudText Color="Color.Primary" Class="mb-2">
            OBS: Du skal tilføje URL til en API for at Pricely kan søge.
            Læs mere om det <MudLink  Color="Color.Tertiary" Href="/apiurl">her.</MudLink>
            <br />
        </MudText>
        <MudText Class="mb-4">
            Pricely er stadig under udvikling, og der kan opstå fejl.
            <br />
            (Primær søgning tager udgangspunkt i PriceRunner Resultater)
        </MudText>
        <MudTextField @bind-Value="@SearchText"
                      OnAdornmentClick="() => GetPrices(SearchText)"
                      Label="Søg på over 3 millioner produkter..."
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Secondary"
                      Class="mb-4"
                      Style="border-radius: 12px;" />
    </MudCardContent>
</MudCard>

<br />

@if (Results != null)
{

    <MudGrid Spacing="0" Justify="Justify.SpaceAround">
        @foreach (var productResult in Results.ProductResults)
        {
            <ProductListingCard  ImageUrl="@productResult.ImageUrl"
            LowestOrDefaultPrice="@productResult.LowestPrice"
            ProductDetailsUrl="@productResult.DetailsUrl"
            ProductName="@productResult.Name"
            SearchCompanyName="PriceRunner" />
        }
    </MudGrid>
    <PricelyWeb.Client.Components.Global.Warnings.DataDisclaimer/>
}

@code {
    public PriceRunnerSearchResults Results { get; set; } 
    public string SearchText { get; set; }

    public async Task GetPrices(string search)
    {
        // Results = await _getPriceRunnerResults.GetProductsFromSearch(search);

        Results = await _getPriceRunnerResults.GetProductsFromSearch(search);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

        // Results =  await _getPriceRunnerResults.GetProductsFromSearch("");
    }

}